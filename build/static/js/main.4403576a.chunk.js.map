{"version":3,"sources":["components/Author.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Author","name","birthDate","topWork","workCount","className","Accordion","Item","eventKey","Header","Body","App","useState","input","setInput","authorsList","setAuthorsList","isLoading","setIsLoading","searched","setSearched","instance","axios","create","baseURL","fetchAuthorsListData","a","query","get","request","data","docs","InputGroup","FormControl","placeholder","type","onKeyUp","e","preventDefault","key","value","onChange","target","Button","variant","disabled","onClick","Spinner","animation","length","map","author","birth_date","top_work","work_count","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTA+BeA,MA3Bf,YAAwD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,UAEvC,OACI,qBAAKC,UAAU,SAAf,SACI,8BACI,eAACC,EAAA,EAAUC,KAAX,CAAgBC,SAAUP,EAA1B,UAEI,cAACK,EAAA,EAAUG,OAAX,CAAkBJ,UAAU,iBAA5B,SACI,4BAAIJ,MAGR,eAACK,EAAA,EAAUI,KAAX,CAAgBL,UAAU,eAA1B,UACQ,iDACA,+BACI,+CAAmBH,GAAsB,iBACzC,6CAAiBC,GAAkB,iBACnC,gDAAoBC,GAAsB,+B,gCC6E3DO,MA1Ff,WAEI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAEMC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,mCARF,SAWIC,IAXJ,2EAWX,8BAAAC,EAAA,6DACUC,EAAO,mBAAoBd,EADrC,SAE0BQ,EAASO,IAAID,GAFvC,cAEUE,EAFV,OAIIb,EAAea,EAAQC,KAAKC,MAC5Bb,GAAa,GACbE,GAAY,GANhB,kBAOWS,GAPX,4CAXW,sBAwCX,OACI,qBAAKxB,UAAU,MAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,+DAGA,eAAC2B,EAAA,EAAD,CAAY3B,UAAU,0BAAtB,UACI,cAAC4B,EAAA,EAAD,CACIC,YAAY,yBACZC,KAAK,OACLC,QAvBO,SAACC,GACxBA,EAAEC,iBACW,UAAVD,EAAEE,MACDrB,GAAa,GACbO,MAoBYe,MAAO3B,EACP4B,SAjBC,SAACJ,GAClBvB,EAASuB,EAAEK,OAAOF,OAClBpB,GAAY,MAiBA,cAACuB,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,UAAWhC,EAAOsB,KAAK,SAASW,QAjC9D,SAACT,GACnBA,EAAEC,iBACFpB,GAAa,GACbO,KA8BY,uBAMFR,EAAW,cAAC8B,EAAA,EAAD,CAASC,UAAU,SAASJ,QAAQ,YAAc,sBAG/D,8BAC8B,KAAb,OAAX7B,QAAW,IAAXA,OAAA,EAAAA,EAAakC,QAES,KAAb,OAALpC,QAAK,IAALA,OAAA,EAAAA,EAAOoC,SAAgB9B,EACnB,6DAAgCN,KAChC,kHAEL,cAACP,EAAA,EAAD,CAAWD,UAAU,4BAArB,gBAEIU,QAFJ,IAEIA,OAFJ,EAEIA,EAAamC,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CACIlD,KAAOkD,EAAOlD,KACdC,UAAYiD,EAAOC,WACnBjD,QAAUgD,EAAOE,SACjBjD,UAAY+C,EAAOG,0B,QClF1CC,EAAQC,YAAe,CAClCC,QAAS,K,QCSSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.4403576a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Author.css';\nimport {Accordion} from 'react-bootstrap';\n\nfunction Author({name, birthDate, topWork, workCount}) {\n\n    return (\n        <div className=\"author\">\n            <div>\n                <Accordion.Item eventKey={name}>\n\n                    <Accordion.Header className=\"author__header\">\n                        <p>{name}</p>\n                    </Accordion.Header>\n\n                    <Accordion.Body className=\"author__info\">\n                            <h5>Authors Details</h5>\n                            <ul>\n                                <li>Birth Date : {(birthDate)?birthDate: \" Not Known \"}</li>\n                                <li>Top Work : {(topWork)?topWork: \" Not Known \"}</li>\n                                <li>Total Books : {(workCount)?workCount: \" Not Known \"}</li>\n                            </ul>\n                    </Accordion.Body>\n\n                </Accordion.Item>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Author;\n","import React, {useState} from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Author from './components/Author';\nimport {InputGroup, FormControl, Button} from 'react-bootstrap';\nimport {Accordion, Spinner} from 'react-bootstrap';\n\nfunction App() {\n\n    const [input, setInput] = useState('');\n    const [authorsList, setAuthorsList] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [searched, setSearched] = useState(false);\n\n    const instance = axios.create({\n        baseURL: \"https://openlibrary.org/search\",\n    })\n\n    async function fetchAuthorsListData() {\n        const query= \"/authors.json?q=\"+ input;\n        const request = await instance.get(query);\n\n        setAuthorsList(request.data.docs);\n        setIsLoading(false);\n        setSearched(true);\n        return request;\n    }\n\n    const searchAuthors = (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        fetchAuthorsListData();\n    }\n\n    const searchAuthorsEnter = (e) => {\n        e.preventDefault();\n        if(e.key === 'Enter'){\n            setIsLoading(true);\n            fetchAuthorsListData();\n        }\n    }\n\n    const handleChange = (e) => {\n        setInput(e.target.value);\n        setSearched(false);\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App__container\">\n                <h1>Welcome to the world of books</h1>\n\n                {/* Search box */}\n                <InputGroup className=\"App__containerSearchBox\">\n                    <FormControl\n                        placeholder=\"Enter an author's name\"\n                        type=\"text\" \n                        onKeyUp={searchAuthorsEnter} \n                        value={input} \n                        onChange={handleChange}\n                    />\n                    <Button variant=\"outline-secondary\" disabled={!input} type=\"submit\" onClick={searchAuthors}>\n                        Search\n                    </Button>\n                </InputGroup>\n\n                {/* Loading Spinner */}\n                {(isLoading)?<Spinner animation=\"border\" variant=\"primary\" />:(<p></p>)}\n\n                {/* List of authors */}\n                <div>\n                    {(authorsList?.length === 0) \n                        ?\n                        ((input?.length !== 0 && searched)\n                            ? <h5>There are no authors named {input}</h5> \n                            : <h5>Please search for the authors in the above search box to view the author's info.</h5>)\n                        :\n                        (<Accordion className=\"App__containerAuthorsList\">\n                            {/* Author name item expandable */}\n                            {authorsList?.map((author) => (\n                                <Author \n                                    name= {author.name}\n                                    birthDate= {author.birth_date}\n                                    topWork= {author.top_work}\n                                    workCount= {author.work_count}\n                                />\n                            ))}\n                        </Accordion>)\n                    }\n                </div>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\n\nexport const store = configureStore({\n  reducer: {\n    \n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}